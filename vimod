#!/usr/bin/env bash

action=$1

sausage() {
  cat << _EOD
$(basename $0) <command> [<args>]

  commands:

    add <git url>
      Add a plugin from git

    init
      Initialize plugins and install vim settings
      Usually used after first clone

    ls
      List all installed plugins

    upgrade all | <plugin name>
      Upgrade all plugins or upgrade single plugin

    rm <plugin name>
      Remove a plugin

_EOD
  exit 1
}

set_dotvim_path() {
  if [[ -L ${1} ]]; then
    dotvimScriptPath=$(readlink ${1})
  else
    dotvimScriptPath=${1}
  fi
  dotvimPath=${dotvimScriptPath%/*}
}

ls_submodule() {
  ls -1 vim/bundle
}

add_submodule() {
  local gitUrl=$1
  local gitName=${gitUrl##*/}

  if ! echo ${gitName} | grep -q '\.git$' ; then
    echo "\"${gitUrl}\" is not a valid git url..."
    exit 1
  fi

  $DBG git submodule add -f ${gitUrl} vim/bundle/${gitName%.git}
  $DBG git add vim/bundle/${gitName%.git}
  $DBG git commit -m "installed ${gitName%.git} module"

}

rm_submodule() {
  local module=$1
  if test -d ./vim/bundle/${module}; then
    local submodulePath=vim/bundle/${module}
    $DBG git config -f .git/config --remove-section submodule.${submodulePath}
    $DBG git config -f .gitmodules --remove-section submodule.${submodulePath}
    $DBG git rm --cached ${submodulePath}
    $DBG rm -rf ./${submodulePath} > /dev/null 2>&1
    $DBG rm -rf .git/modules/${submodulePath} > /dev/null 2>&1
    $DBG git commit -m "removed ${module}"
  else
    echo "No such module is installed..."
    exit 1
  fi
}

upgrade_submodule() {
  local module=$1
  local submodulePath=vim/bundle/${module}
  if [[ ${module} == 'all' ]]; then
    upgrade_all_submodules
    return
  fi
  if ! test -d ./${submodulePath}; then
    echo "${module} module is not installed..."
    exit 1
  fi
  $DBG cd ${submodulePath}
  $DBG git pull origin master
}

upgrade_all_submodules() {
  $DBG git submodule foreach git pull origin master
}

init() {
  if [[ -x ~/.vimrc ]]; then
    mv ~/.vimrc ~/.vimrc_backup
  fi
  if [[ -x ~/.vim ]]; then
    mv ~/.vim ~/.vim_backup
  fi
  ln -s ${PWD}/vimrc ~/.vimrc
  ln -s ${PWD}/vim ~/.vim
  [[ -d ~/bin/ ]] && ln -sf ${PWD}/vimod ~/bin/vimod
  $DBG git submodule update --init
}

trap_cleanup() {
  cd ${curdir}
}

set_dotvim_path ${0}
curdir=${PWD}
cd ${dotvimPath}
trap trap_cleanup SIGINT SIGQUIT SIGTERM

case $action in
  (ls|list)
    ls_submodule
    ;;
  (add|install)
    [[ $2 ]] || sausage
    add_submodule $2
    ;;
  (rm|remove|delete)
    [[ $2 ]] || sausage
    rm_submodule $2
    ;;
  (up|upgrade)
    [[ $2 ]] || sausage
    upgrade_submodule $2
    ;;
  (init)
    init
    ;;
  (*)
    sausage
    ;;
esac
